import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (ApplicationBuilder, CommandHandler, MessageHandler, filters,
                          ContextTypes, ConversationHandler, CallbackQueryHandler)
from datetime import datetime
from models import Base, User, Product
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from config import BOT_TOKEN, CHANNEL_USERNAME, MODERATOR_USERNAMES

NAME, PHOTOS, DESCRIPTION, CITY, DELIVERY = range(5)
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
engine = create_engine('sqlite:///data.db')
Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)

CITIES = ['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ö–∞–∑–∞–Ω—å']

def get_or_create_user(session, tg_user):
    user = session.query(User).filter_by(telegram_id=tg_user.id).first()
    if not user:
        user = User(telegram_id=tg_user.id, username=tg_user.username)
        session.add(user)
        session.commit()
    return user

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = Session()
    user = get_or_create_user(session, update.effective_user)
    await update.message.reply_text("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sell, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.")

async def sell(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.user_data['photos'] = []
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ 3 —Ñ–æ—Ç–æ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'")
    return PHOTOS

async def get_photos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        file_id = update.message.photo[-1].file_id
        context.user_data['photos'].append(file_id)
        if len(context.user_data['photos']) == 3:
            await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
            return DESCRIPTION
        else:
            await update.message.reply_text("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'")
    elif update.message.text.lower() == '–≥–æ—Ç–æ–≤–æ':
        if context.user_data['photos']:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
            return DESCRIPTION
        else:
            await update.message.reply_text("–ù—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.")
    else:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

async def get_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['description'] = update.message.text
    keyboard = [[InlineKeyboardButton(city, callback_data=city)] for city in CITIES]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=InlineKeyboardMarkup(keyboard))
    return CITY

async def get_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['city'] = query.data
    context.user_data['delivery'] = {'meetup': False, 'delivery': False}
    keyboard = [
        [InlineKeyboardButton("‚òê –õ–∏—á–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞", callback_data='meetup')],
        [InlineKeyboardButton("‚òê –î–æ—Å—Ç–∞–≤–∫–∞", callback_data='delivery')],
        [InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data='done')],
    ]
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
    return DELIVERY

async def set_delivery(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    choice = query.data

    if choice == 'done':
        data = context.user_data
        if not all([data.get('name'), data.get('description'), data.get('city')]) or            not data.get('photos') or not (data['delivery']['meetup'] or data['delivery']['delivery']):
            await query.edit_message_text("‚ùóÔ∏è–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /sell")
            return ConversationHandler.END

        session = Session()
        user = get_or_create_user(session, update.effective_user)
        product = Product(
            user_id=user.id,
            name=data['name'],
            description=data['description'],
            city=data['city'],
            delivery_meetup=data['delivery']['meetup'],
            delivery_shipping=data['delivery']['delivery'],
            photo_ids=','.join(data['photos']),
            status='pending'
        )
        session.add(product)
        session.commit()

        caption = (f"üõçÔ∏è <b>{product.name}</b>
"
                   f"üì¶ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {product.description}
"
                   f"üìç <b>–ì–æ—Ä–æ–¥:</b> {product.city}
"
                   f"üöö <b>–°–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏:</b> {'–õ–∏—á–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞' if product.delivery_meetup else ''} {'–î–æ—Å—Ç–∞–≤–∫–∞' if product.delivery_shipping else ''}
"
                   f"üë§ <b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> @{update.effective_user.username}")

        media = [InputMediaPhoto(media=pid) for pid in data['photos']]
        media[0].caption = caption
        media[0].parse_mode = 'HTML'

        for mod in MODERATOR_USERNAMES:
            await context.bot.send_media_group(chat_id=mod, media=media)
            await context.bot.send_message(chat_id=mod, text=f"–û–¥–æ–±—Ä–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ? /approve_{product.id} –∏–ª–∏ /reject_{product.id}")

        await query.edit_message_text("–ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
        return ConversationHandler.END

    context.user_data['delivery'][choice] = not context.user_data['delivery'][choice]
    status = context.user_data['delivery']
    keyboard = [
        [InlineKeyboardButton(f"{'‚úÖ' if status['meetup'] else '‚òê'} –õ–∏—á–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞", callback_data='meetup')],
        [InlineKeyboardButton(f"{'‚úÖ' if status['delivery'] else '‚òê'} –î–æ—Å—Ç–∞–≤–∫–∞", callback_data='delivery')],
        [InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data='done')],
    ]
    await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard))
    return DELIVERY

async def approve(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = Session()
    text = update.message.text
    if text.startswith('/approve_'):
        pid = int(text.split('_')[1])
        product = session.query(Product).get(pid)
        if product:
            product.status = 'approved'
            session.commit()
            photos = product.photo_ids.split(',')
            caption = (f"üõçÔ∏è <b>{product.name}</b>
"
                       f"üì¶ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {product.description}
"
                       f"üìç <b>–ì–æ—Ä–æ–¥:</b> {product.city}
"
                       f"üöö <b>–°–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏:</b> {'–õ–∏—á–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞' if product.delivery_meetup else ''} {'–î–æ—Å—Ç–∞–≤–∫–∞' if product.delivery_shipping else ''}
"
                       f"üë§ <b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> @{product.user.username}")
            media = [InputMediaPhoto(media=p) for p in photos]
            media[0].caption = caption
            media[0].parse_mode = 'HTML'
            await context.bot.send_media_group(chat_id=CHANNEL_USERNAME, media=media)
            await update.message.reply_text("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª.")

async def reject(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = Session()
    text = update.message.text
    if text.startswith('/reject_'):
        pid = int(text.split('_')[1])
        product = session.query(Product).get(pid)
        if product:
            product.status = 'rejected'
            session.commit()
            await update.message.reply_text("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")

if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler('sell', sell)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            PHOTOS: [MessageHandler(filters.PHOTO | filters.TEXT, get_photos)],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_description)],
            CITY: [CallbackQueryHandler(get_city)],
            DELIVERY: [CallbackQueryHandler(set_delivery)],
        },
        fallbacks=[],
    )

    app.add_handler(CommandHandler('start', start))
    app.add_handler(conv)
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^/approve_\d+$'), approve))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^/reject_\d+$'), reject))

    app.run_polling()
