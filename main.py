import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import ApplicationBuilder
app = ApplicationBuilder().token(TOKEN).build()
app.run_polling()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")

# –≠—Ç–∞–ø—ã –∞–Ω–∫–µ—Ç—ã
PRODUCT_NAME, PHOTOS, DESCRIPTION, CITY, DELIVERY_METHOD, USERNAME, CONFIRM = range(7)

# –ì–æ—Ä–æ–¥–∞ –∏ —Å–ø–æ—Å–æ–±—ã –ø–µ—Ä–µ–¥–∞—á–∏
CITIES = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"]
DELIVERY_OPTIONS = ["–õ–∏—á–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞", "–î–æ—Å—Ç–∞–≤–∫–∞"]

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
user_data = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –∞–Ω–∫–µ—Ç—É. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    return PRODUCT_NAME

async def product_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    context.user_data["photos"] = []
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–æ–≤–∞—Ä–∞.")
    return PHOTOS

async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1]
    file_id = photo.file_id
    photos = context.user_data["photos"]

    if len(photos) < 3:
        photos.append(file_id)
        if len(photos) == 3:
            await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")
            return DESCRIPTION
        else:
            await update.message.reply_text("–î–æ–±–∞–≤—å—Ç–µ –µ—â—ë —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.")
            return PHOTOS
    else:
        await update.message.reply_text("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ 3 —Ñ–æ—Ç–æ. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")
        return DESCRIPTION

async def skip_photos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")
    return DESCRIPTION

async def description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["description"] = update.message.text
    keyboard = [[InlineKeyboardButton(city, callback_data=city)] for city in CITIES]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=InlineKeyboardMarkup(keyboard))
    return CITY

async def select_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["city"] = query.data

    keyboard = [[InlineKeyboardButton(opt, callback_data=opt)] for opt in DELIVERY_OPTIONS]
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
    return DELIVERY_METHOD

async def delivery_method(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["delivery"] = query.data

    await query.edit_message_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à @username.")
    return USERNAME

async def username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["username"] = update.message.text

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    data = context.user_data
    caption = (
        f"<b>{data['name']}</b>\n"
        f"üìç {data['city']}\n"
        f"üöö –°–ø–æ—Å–æ–±: {data['delivery']}\n"
        f"üí¨ {data['description']}\n"
        f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {data['username']}"
    )

    media = [InputMediaPhoto(media=pid) for pid in data["photos"]]

    if media:
        media[0].caption = caption
        media[0].parse_mode = "HTML"
        await update.message.reply_media_group(media)
    else:
        await update.message.reply_text(caption, parse_mode="HTML")

    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ê–Ω–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            PRODUCT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, product_name)],
            PHOTOS: [
                MessageHandler(filters.PHOTO, photo_handler),
                CommandHandler("skip", skip_photos)
            ],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, description)],
            CITY: [CallbackQueryHandler(select_city)],
            DELIVERY_METHOD: [CallbackQueryHandler(delivery_method)],
            USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, username)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv)
    app.run_polling()